'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _reflux = require('reflux');var _reflux2 = _interopRequireDefault(_reflux);
var _actions = require('../actions/actions');var _actions2 = _interopRequireDefault(_actions);
var _store = require('../stores/store');var _store2 = _interopRequireDefault(_store);
var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _classnames = require('classnames');var _classnames2 = _interopRequireDefault(_classnames);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var 

RefluxApp = function (_React$Component) {_inherits(RefluxApp, _React$Component);
  function RefluxApp(props) {_classCallCheck(this, RefluxApp);var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RefluxApp).call(this, 
    props));_this.














    handleAdd = function () {};_this.


    handleRemove = function (id) {};_this.state = { items: [] };return _this;}_createClass(RefluxApp, [{ key: 'componentDidMount', value: function componentDidMount() {_store2.default.listen(function (items) {});} /*
                                                                                                                                                                                                                        Note about scoping: as of React .14, components no longer
                                                                                                                                                                                                                        autobind `this` to methods.  Using ES7 arrow methods solves this by preserving the scope within the method. If you prefer to use older function declaration syntax,
                                                                                                                                                                                                                        then ensure you bind `this` to each method that uses it.
                                                                                                                                                                                                                      */ }, { key: 'render', value: function render() {return (
        _react2.default.createElement('div', { 'class': 'todo-item' }));} }]);return RefluxApp;}(_react2.default.Component);exports.default = RefluxApp;